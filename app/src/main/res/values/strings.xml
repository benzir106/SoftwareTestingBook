<resources>
    <string name="app_name">Software Testing Book</string>
    <string name="chap1">Chapter-I
Fundamentals of Testing /n
I-Fundamentals of Testing Agenda /n
Chapter-1- Fundamentals of software testing /n
        - 1/01 Understanding software testing /n
        - 1/02  The seven general principles  of software testing /n
        - 1/03  Fundamental test process /n
        - 1/04  The psychology of testing /n
I-Fundamentals of Testing/n
        01- Understanding software testing /n
The economic importance of software - The functioning the machines and equipment depends largely on software - We cannot imagine large systems in telecommunication, finance or traffic control running without software.
Software quality - More and more, the quality of software has become the determining factor for the success of technical or commercial systems and products
Testing for quality improvement - Testing and reviewing insure the improvement of the quality of software products as well as the quality of software development process itself.
I-Fundamentals of Testing 01- Understanding software testing Failure example 1: Ariane 5 launch Flight 501,which took place on June 4,1996,was the first test flight of the Ariane 5 expendable launch system. It was not successful; the rocket tore itself apart 37 seconds after launch because of a malfunction in the in the control software, making the fault one of the most expensive computer bugs in history. The Ariane 5 software reused the specifications the Ariane 4, but the Ariane 5’s flight path was considerably different and beyond the range for which the reused code  had been designed. Specifically, the Ariane 5’s greater acceleration caused the back-up and primary inertial guidance computers to crash, after which the launcher’s nozzles were directed spurious data. Pre-flight tests had never been performed on the re-alignment code under simulated Ariane 5 flight conditions, so the error was not discovered before launch. Source : Wikipedia.com
I-Fundamentals of Testing 01- Understanding software testing Failure example 2: Lethal X-Rays Because of a software failure a number of patients received a lethal dose  dose a gamma rays: Therac-25 was a radiation therapy machine produced by atomic Energy of Canada Limited. It was involved with at least six known accidents between 1985 and 1987, in which patients were in some cases on the order of hundreds of gray. At least five patients died of the overdoses. These accidents highlighted the dangers of software control of safety-critical system. Source: Wikipedia.com
I-Fundamentals of Testing 01- Understanding software testing
Causes of software failures Human error A defect was introduced into the software code, the data or the configuration parameters Causes of human error time pressure excessive demands because of complexity   distractions Environmental conditions changes of environmental conditions Causes of negative environmental conditions radiation, magnetism, electronic field on pollution sun spots, hard       disk  crashes, power functions.
I-Fundamentals of Testing 01- Understanding software testing Error, defect, failure - Error(IEEE 610): a human action that produces an incorrect result, e.g. a programming error - Defect: a flaw in a component or system to fail to perform its required function, e.g. an incorrect statement of data definition. - Failure: the physical or functional manifestation of a  defect. A  defect, if encountered during execution, may cause a failure. - Deviation of the component or system from its expected delivery, service or result. (After Fenton) Defects cause failure
I-Fundamentals of Testing 01- Understanding software testing Testing during software development, maintenance and operation - Increasing software quality: Testing helps to furnish the software with the desired attributes, i.e. to remove defects leading to failures. - Reduction of the risk of encountering errors: Appropriate test activities will reduce the risk that errors are encountered during software operation - Meeting obligations: tests might be mandatory because of client’s or legal  regulation as well as to meet industrial standards.
I-Fundamentals of Testing 01- Understanding software testing
Costs of defects - The costs of fixing defect is increase with the time they remain in the system. - Detecting errors at an early stage allows for error correction at reduced cost.
I-Fundamentals of Testing 01- Understanding software testing Software quality - Definition Software (as per IEEE 610): Computer programs, procedures and possibly associated documentation and data pertaining to the operation a computer system - Definition Software quality (as per IEEE std 610): The totality of functionality and features of a software product that contribute to its ability to satisfy stated or implied needs. - Definition Quality (as per IEEE std 610): The degree to which a component, system or process meets specified requirements and/or user/customer needs and expectations.
I-Fundamentals of Testing 01- Understanding software testing Software quality - According to ISO/IEC 9126 software quality consists of: - Functionality                                                                      -Accuracy - Reliability                     Functional Q-attributes                - Compliance - Usability                                                                             - Interoperability - Efficiency                Non-functional Q-attributes              - Stability   - Maintainability                                                                    - Security - Portability - Types of Quality Assurance (QA): - constructive activities to prevent defects, e.g. through appropriate methods of software engineering - analytical activities for finding defects, e.g. through testing leading to correcting defects and preventing failures, hence increasing the software quality.
I-Fundamentals of Testing 01- Understanding software testing Constructive quality assurance Quality of process- Quality management Motto - Defects not made , need not be fixed - Defects that were made need not be repeated - prevent defects Constructive Q A organizationa l technical Guidelines Standards Checklists Process rules and regulations Legal requirements Methods Tools Languages Lists/templates IDE
I-Fundamentals of Testing 01- Understanding software testing Analytical quality assurance - Quality of product- Verification and test procedure Motto - defects should be detected early as possible in the process Static testing                                                          -exam               examination without excluding the program Dynamic testing   includes executing the program                          An alytical QA dynamic Static Black box Equivalence partitioning Boundary value analysis State transition testing Decision tables Use case based testing Experience-based techniques White box Statement coverage Branch coverage Condition coverage Path  coverage Review/walkthroughs Control flow analysis Dataflow analysis Computer metrics/analyzer
I-Fundamentals of Testing 01- Understanding software testing Software quality- functional Q-attributes - Functionality means: - Correctness: the functionality meets the   required  attributes / capabilities - Completeness: the functionality meets all(functional) requirements
- Functionality includes (as per ISO/IEC 9126): - suitability - accuracy - interoperability - security
I-Fundamentals of Testing 01- Understanding software testing Software quality- non-functional Q-attributes/1 - Reliability - maturity, fault tolerance, recovery after     failure - characteristic: under given conditions, a software/ a system will keep its   capabilities/ functionality over a period of time. - reliability = quality/time - Usability - Learn ability ,understanding ability, attractiveness - Characteristics: easy to learn, compliance with guidelines, intuitive handling
I-Fundamentals of Testing 01- Understanding software testing Software quality- Non-functional Q-attributes/2 - Efficiency - System behavior: functionality and time behavior - Characteristics: the system requires a minimal use of resources (e.g. CPU-time) for executing the given task - Maintainability - Verifiability, stability, analyzability, changeability - Characteristics: amount of effort needed to introduce changes in system components - Portability - Reparability, compliance, install ability -Ability to transfer the software to a new environment (software, hardware, organization) - Characteristics: easy to install and uninstall, parameters
I-Fundamentals of Testing 01- Understanding software testing Quality attributes - Some software quality attributes are influenced reciprocally, Because of this, depending on the test object, attributes must be prioritized, e.g. efficiency vs. portability. - Different kinds of tests will be performed in order to measure the different kinds of attributes .
I-Fundamentals of Testing 01- Understanding software testing Test goals
- Gain knowledge about defects in the test objects Defects contained in the test objects must be detected and be described in such a way as to facilitate their correction - Poor of functionality System functionality should be implemented as specified - Generating information before handling over a software system to the users, information about possible risks has to be provided. Gaining such information might be one of the test goals. - Gaining confidence Software that has been well tested in trusted to meet the expected functionality and to have a high quality level.
I-Fundamentals of Testing 01- Understanding software testing How much testing is enough? - Exit criteria not finding (any more) defects is not an appropriate criterion to stop testing activities. Other metrics are needed to adequately reflect the quality level reached. - Risk based testing Levels of risk determine the extent of testing carried out, i.e. liability for damages in case of failures occurring, economic and project related aspects. - Time and budget testing The amount of resources available (personal, time and budget) might  determine the extent of testing efforts.
I-Fundamentals of Testing 01- Understanding software testing Test case, test basis - Test case (as per IEEE 829): test case definitions include at least the following information - pre-condition - set of input values - set of expected results - expected post conditions - unique identifier - dependence on other test cases - reference to the requirement that will be tested - how to execute the test and check results (optional) - priority(optional)
- Test basis: (also: test base) Set of documents defining the requirements of a component or system. Used as the basis for the development of test cases
I-Fundamentals of Testing 01- Understanding software testing Software development and reviews - Code, source code: A computer program, written in a programming language, which can be read by human beings. - Debugging: Locates and corrects defects in the source code. - Software-Development: Is a complex process/sequence of activities aiming at implementing a computer system. It usually follows a software development model. - Requirement A requirement describes a functional attribute that is desired or seen as obligatory. - Review (after IEEE 1028) Evaluation of a product or project status to find discrepancies from planned result and to recommend improvements.
I-Fundamentals of Testing 01- Understanding software testing Testing and debugging
- Test and re-test are test activities testing shows system failures. Re-testing proves, that the defect has been corrected. - Debugging and correcting defects are developer activities Through debugging, developers can reproduce failures, investigate the state  of programs and find the corresponding defect in order to correct it.
Test Debugging
Correcting defects
Retest
I-Fundamentals of Testing 01- Understanding software testing Summary: - Software failures may cause enormous damage - Software quality (SQ) is the sum of attributes that refer to the capability of the software to meet given requirements - Constructive software quality, assurance deals with preventing defects - Analytical software quality, assurance deals with finding defects and correcting them - Functional and non-functional quality attributes define the total quality of the system - Each test has to have predefined exit criteria reaching the exit criteria will conclude testing activities. - Testers look for failures in the system and report them (testing) . Developers look for detects and correct them (debugging)

    </string>
</resources>
